swagger: "2.0"
info:
  description: "SwaggerのサンプルYAMLから作成したあげぽよ(仮)のAPI定義"
  version: 1.0.0
  title: apepoyo API
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@agpy.io"
  license:
    name: MIT
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: /v1
tags:
  - name: item
    description: Everything about your items
    externalDocs:
      description: Find out more
      url: "http://swagger.io"
  - name: user
    description: Access to itemstore orders
    externalDocs:
      description: Find out more about our store
      url: "http://swagger.io"
schemes:
  - http
paths:
  /items:
    post:
      tags:
        - item
      summary: Add a new item to the inventory
      x-swagger-router-controller: SampleController
      description: ""
      operationId: additem
      consumes:
        - application/json
      produces:
        - application/xml
      parameters:
        - in: body
          name: body
          description: item object that needs to be added to the inventory
          required: false
          schema:
            $ref: "#/definitions/item"
      responses:
        "405":
          description: Invalid input
      security:
        - itemstore_auth:
            - "write:items"
            - "read:items"
  "/items/{itemId}":
    get:
      tags:
        - item
      summary: Find item by ID
      description: Returns a single item
      operationId: getitemById
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/item"
        "400":
          description: Invalid ID supplied
        "404":
          description: item not found
      security:
        - api_key: []
        - itemstore_auth:
            - "write:items"
            - "read:items"
    put:
      tags:
        - item
      summary: Updates a item in the store with form data
      description: ""
      operationId: updateitemWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          type: string
        - name: name
          in: formData
          description: Updated name of the item
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the item
          required: false
          type: string
      responses:
        "405":
          description: Invalid input
      security:
        - itemstore_auth:
            - "write:items"
            - "read:items"
    delete:
      tags:
        - item
      summary: Deletes a item
      description: ""
      operationId: deleteitem
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          type: string
        - name: itemId
          in: path
          description: item id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid item value
      security:
        - itemstore_auth:
            - "write:items"
            - "read:items"
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  "/users/{username}":
    get:
      tags:
        - user
      summary: Get user by user id
      description: ""
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: userid
          in: path
          description: name that need to be deleted
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userid
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
securityDefinitions:
  itemstore_auth:
    type: oauth2
    authorizationUrl: "http://itemstore.swagger.io/api/oauth/dialog"
    flow: implicit
    scopes:
      "write:items": modify items in your account
      "read:items": read your items
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  user:
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
        example: Yamada Taro
    xml:
      name: User
  item:
    required:
      - id
      - name
      - owner
      - category
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Yamada Taro
      owner:
        type: string
        example: Yamada Hanako
      status:
        type: string
        description: item status in the store
        enum:
          - available
          - pending
          - sold
  ApiResponse:
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
    xml:
      name: "##default"
externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
